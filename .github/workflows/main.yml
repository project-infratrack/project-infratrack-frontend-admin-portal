on:
  push:
    branches:
      - release # Use your actual branch name
name: Build the application

jobs:
  build:
    name: Build and release new application
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - uses: actions/setup-java@v4
        with:
          distribution: "zulu"
          java-version: "21"

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.29.2"
          channel: "stable"

      - name: Accept Android licenses
        run: |
          mkdir -p /usr/local/lib/android/sdk/licenses
          echo "8933bad161af4178b1185d1a37fbf41ea5269c55" > /usr/local/lib/android/sdk/licenses/android-sdk-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" >> /usr/local/lib/android/sdk/licenses/android-sdk-license
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" >> /usr/local/lib/android/sdk/licenses/android-sdk-license
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > /usr/local/lib/android/sdk/licenses/android-sdk-preview-license

      - name: Build Flutter Application
        run: |
          rm -f pubspec.lock
          flutter pub get
          flutter clean
          flutter pub get
          flutter build apk --release --split-per-abi

      - name: List build directory contents (for debugging)
        run: |
          find build -type f -name "*.apk" | sort

      - name: Get latest release version and increment
        id: version
        run: |
          # Get latest release tag, default to v0.1.0 if none exists
          LATEST_TAG=$(curl -s -H "Authorization: token ${{ secrets.TOKEN }}" \
                      "https://api.github.com/repos/${{ github.repository }}/releases/latest" | \
                      grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "v0.1.0")

          # Extract version components
          if [[ $LATEST_TAG =~ v([0-9]+)\.([0-9]+)\.([0-9]+) ]]; then

            MAJOR=${BASH_REMATCH[1]}
            MINOR=${BASH_REMATCH[2]}
            PATCH=${BASH_REMATCH[3]}
            
            # Increment patch version
            PATCH=$((PATCH + 1))
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          else
            # Default if tag doesn't match expected format
            NEW_VERSION="v0.1.1"
          fi

          echo "Previous version: $LATEST_TAG, New version: $NEW_VERSION"
          echo "VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Push to releases
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-*.apk"
          tag: ${{ steps.version.outputs.VERSION }}
          token: ${{secrets.TOKEN}}
          name: "InfraTrack Release ${{ steps.version.outputs.VERSION }}"
          body: "Automatic build from GitHub Actions workflow"
